1、super.run()
在研究多线程的时候，发现很多demo都出现了super.run()代码，那么这段代码有什么作用呢？
2、volatileg 关键字
volatile 修饰的成员变量在每次线程被访问时，都强迫从主存中重读该成员变量的值，当成员变量发生变化，强迫线程将变化值写到主存（共享内存）中。
这样，两个线程总是看到某个成员变量的同一个值，保证了同步数据的可见性。
但是volatile关键字只能用于变量，其主要用于解决变量在多个线程之间的可见性，而synchronized关键字可以修饰方法以及代码块，主要用于解决多个线程之间访问资源
的同步性。
3、等待/通知（wait/notify）机制：
这样一种场景：
当两个线程之间存在生产和消费者关系，也就是说第一个线程（生产者）做相应的操作然后第二个线程（消费者）感知到了变化又进行相应的操作，
第二个语句不停过通过轮询机制来检测判断条件是否成立。如果轮询时间的间隔太小会浪费CPU资源，轮询时间的间隔太大，就可能取不到自己想要的数据。
所以这里就需要我们今天讲到的等待/通知（wait/notify）机制来解决这两个矛盾。
这个机制中，线程A调用了对象O的wait()方法进入等待状态，而另一个线程B调用对象O的notify()/notifyAll()方法，线程A收到通知后退出等待序列，
进入可运行状态，而后执行后续操作。因此，wati/notify就想信号开关一样。
notify():随机唤醒等待队列中等待同一共享资源的“一个线程”，并使该线程退出等待队列，进入可运行状态；
wait():调用此方法的线程释放共享资源锁，然后从运行状态退出，进入等待队列，直到再次被唤醒；
synchronized关键字可以将任何一个Object对象作为同步对象来看待，而Java为每个Object都实现了等待/通知（wait/notify）机制的相关方法
----------------------------------------------------------------------------------------------------------------------------
并发编程，需要考虑的关键问题是：线程间通信以及线程间同步。
线程间通信：共享内存 或者 消息传递 两种方式；
线程间同步：字面意思是，程序控制不同线程间操作发生的顺序。共享内存中，同步是显式的，即必须要显式指定某个方法或某段代码在线程之间互斥；消息传递中，
由于消息的发送是在消息的接收之前，所以同步是隐式的。
Java的并发采用共享内存模型，Java通信是隐式进行。
--------------待阅读《JVM》后完成读后感---------------------
